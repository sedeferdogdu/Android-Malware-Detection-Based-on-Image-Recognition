import os
import numpy as np
from PIL import Image

def list_subdirectories(path):
    subdirectories = [d for d in os.listdir(path) if os.path.isdir(os.path.join(path, d))]
    return subdirectories

def convert_to_image(file_path, output_image_path):
    with open(file_path, "rb") as f:
        file_content = f.read()
        # Convert the binary content to a numpy array of 8-bit unsigned integers
        array_data = np.frombuffer(file_content, dtype=np.uint8)
        
        # Calculate the size of the image (assuming a square shape for simplicity)
        image_size = int(np.sqrt(len(array_data)))
        
        # Reshape the 1D array to a 2D array
        image_data = array_data[:image_size * image_size].reshape((image_size, image_size))

        # Create an image from the array data
        img = Image.fromarray(image_data, "L")

        # Save the image
        img.save(output_image_path)

if __name__ == "__main__":
    source_path = "dataset/Riskware"
    sub_dirs = list_subdirectories(source_path)
    for sub_dir in sub_dirs:
        folder = source_path + '/' + sub_dir
        destination_path = source_path + '_images/' + sub_dir
        
        # Ensure the destination path exists
        os.makedirs(destination_path, exist_ok=True)
        # Convert each extracted file to a grayscale image
        for file_name in ["classes.dex", "AndroidManifest.xml", "resources.arsc", "META-INF/CERT.RSA"]:
            input_file_path = os.path.join(folder, file_name)  
            output_png_name = file_name
            if file_name == "META-INF/CERT.RSA":
                output_png_name = "CERT.RSA"
            output_image_path = os.path.join(destination_path, f"{output_png_name}.png")
            convert_to_image(input_file_path, output_image_path)
