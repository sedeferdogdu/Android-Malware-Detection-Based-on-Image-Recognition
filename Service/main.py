import io
import sys
import zipfile

from fastapi import FastAPI, UploadFile, File, HTTPException
from model_utils import MalwareDetection

app = FastAPI()

model = MalwareDetection('model.tflite')
required_file_names = ["AndroidManifest.xml", "META-INF/CERT.RSA", "classes.dex", "resources.arsc"]


@app.post("/predict/apk/")
async def predict_apk(file: UploadFile = File(...)):
    try:
        contents = await file.read()
        apk_file = zipfile.ZipFile(io.BytesIO(contents))

        required_content = []
        for required_file_name in required_file_names:
            if required_file_name in apk_file.namelist():
                with apk_file.open(required_file_name) as required:
                    required_content.append(required.read())
            else:
                required_content.append(bytes())

        result = model.predict(required_content)
        return {"result": result}
    except Exception as e:
        print(f"{e}", file=sys.stderr)
        raise HTTPException(status_code=500, detail=str(e))
