import sys
from typing import List, Dict, Union

import numpy as np
from tflite_runtime.interpreter import Interpreter
from PIL import Image
import cv2


class MalwareDetection:
    def __init__(self, model_path: str):
        self.interpreter = Interpreter(model_path=model_path)
        self.interpreter.allocate_tensors()

        self.id_to_label = {
            0: "Benign",
            1: "Malware"
        }
        self.gray_img = np.full((128, 128), 128, dtype=np.float32) / 255.0
        self.received = 0

    @staticmethod
    def preprocess_image(pil_image: Image) -> np.ndarray:
        np_image = np.array(pil_image)
        image = cv2.cvtColor(np_image, cv2.COLOR_RGB2BGR)
        image = cv2.resize(image, (128, 128))
        image = image / 255.0
        return image.mean(-1)

    @staticmethod
    def convert_to_image(file_content: bytes) -> Image:
        array_data = np.frombuffer(file_content, dtype=np.uint8)
        image_size = int(np.sqrt(len(array_data)))
        image_data = array_data[:image_size * image_size].reshape((image_size, image_size))
        img = Image.fromarray(image_data, "L")
        return img

    def predict(self, contents: List[bytes]) -> Dict[str, Union[float, str]]:
        self.received += 1
        print(f"{self.received}th request is received {sum([len(content) for content in contents])}", file=sys.stderr)
        images = [self.convert_to_image(file_content) for file_content in contents]
        images = [self.preprocess_image(img) if img.height != 0 else self.gray_img for img in images]

        input_data = np.stack(images, axis=-1).astype(np.float32)

        input_details = self.interpreter.get_input_details()
        output_details = self.interpreter.get_output_details()

        input_tensor_index = input_details[0]['index']
        input_tensor_shape = input_details[0]['shape']
        output_tensor_index = output_details[0]['index']
        output_tensor_shape = output_details[0]['shape']

        self.interpreter.set_tensor(input_tensor_index, input_data[np.newaxis, ...])
        self.interpreter.invoke()

        output_data = self.interpreter.get_tensor(output_tensor_index)
        return {"score": output_data.max().item(), "label": self.id_to_label[output_data.argmax().item()]}
